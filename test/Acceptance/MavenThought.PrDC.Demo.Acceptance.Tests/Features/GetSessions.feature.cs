// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace MavenThought.PrDC.Demo.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Getting sessions using REST API")]
    public partial class GettingSessionsUsingRESTAPIFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetSessions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Getting sessions using REST API", "As a REST API user\r\nI want to query the session list\r\nSo I can use the informatio" +
                    "n", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting all the sessions in the conference")]
        public virtual void GettingAllTheSessionsInTheConference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting all the sessions in the conference", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I have some sessions at the conference");
#line 8
testRunner.When("I get \"sessions\" as JSON");
#line 9
testRunner.Then("I should get a response with all the sessions");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting all the sessions for the Agile track")]
        public virtual void GettingAllTheSessionsForTheAgileTrack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting all the sessions for the Agile track", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
testRunner.Given("I have some sessions at the conference");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Presenter"});
            table1.AddRow(new string[] {
                        "How agile is your Cat?",
                        "Sir Elton Jhon"});
            table1.AddRow(new string[] {
                        "Agile pants",
                        "D\'Arcy Lussier"});
#line 13
testRunner.And("I have track \"Agile\" with sessions:", ((string)(null)), table1);
#line 17
testRunner.When("I get \"sessions/Agile\" as JSON");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Presenter",
                        "Track"});
            table2.AddRow(new string[] {
                        "How agile is your Cat?",
                        "Sir Elton Jhon",
                        "Agile"});
            table2.AddRow(new string[] {
                        "Agile pants",
                        "D\'Arcy Lussier",
                        "Agile"});
#line 18
testRunner.Then("I should get a response with:", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
